library(igraph)
g<-make_ring(10)
plot(g)
q<-delete.edges(g,E(g)[1%->%2])
plot(q)
E(g)[3%->%4]
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/rewiring_with_fermi_function.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/make_Social_network_watts_storage.R')
net<-make.random.social.network(10)
net
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/make_Social_network_watts_storage.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/setDiffuser_Competitive.R')
net<-set.diffuser(net,10)
x<-find_oldFriend_based_fermi(net,134)
x
x<-find_newFriend_based_fermi(net,134)
x
net<-make_friendship(net,134)
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/rewiring_with_fermi_function.R')
net<-make_friendship(net,134)
plot(net)
net<-rewiring(net)
net<-rewiring(net)
net<-rewiring(net)
net<-rewiring(net)
net<-rewiring(net)
list_of_neighbors_i<-neighbors(net,4)
list_of_neighbors_i
class(list_of_neighbors_i)
dissagree_neighbors_i<-V(net)[color!=V(net)[4]$color & V(net) %in% list_of_neighbors_i]
list_of_neighbors_i[which.min(degree(net,dissagree_neighbors_i))]
x<-list_of_neighbors_i[which.min(degree(net,dissagree_neighbors_i))]
x
x[1]
type.convert(x)
class(type.convert(x))
net<-rewiring(net)
class(find_oldFriend_based_fermi(net,4))
class(find_newFriend_based_fermi(net,4)
)
x<-find_oldFriend_based_fermi(net,4)
x
type.convert(x)
y<-(integer(x))
y
x
net
V(net)[x]
V(net)[x].att
as_ids(x)
class(as_ids(x))
debugSource('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/rewiring_with_fermi_function.R')
x<-find_oldFriend_based_fermi(net,4)
x
net<-rewiring(net)
net<-rewiring(net)
net
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/simulator_luncher.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/setDiffuser_Competitive.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/set_Action_probability_vector.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/rewiring_with_fermi_function.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/report_model.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/make_Social_network_watts_storage.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/choose_action.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/calculate_penalty.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/action_probability_claculation.R')
simulator_luncher(10,10,10,0.001)
net
V(net)$action_prob_red
report_diffusion_condition(net,10)
node_id <-1:length(V(net))
node_id
node_id<-1:vcount(net)
node_id
a_p_r<-V(net)$action_prob_red
a_p_r
a_p_b<-V(net)$action_prob_blue
a_p_b
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/report_model.R')
report_diffusion_condition(net,10)
length(v(net)$action_prob_red)
length(V(net)$action_prob_red)
length(V(net)$action_prob_blue)
length(V(net)$action_prob_white)
length(1:vcount(net))
length(V(net)$count_penalty_red_action)
length(V(net)$color)
report<-data.frame()
report<-data.frame(node_id,action_prob_red=V(net)$action_prob_red)
report
report<-data.frame(node_id,action_prob_red=V(net)$action_prob_red,action_prob_blue=V(net)$action_prob_blue)
reprot
report
report<-data.frame(node_id,action_prob_red=V(net)$action_prob_red,action_prob_blue=V(net)$action_prob_blue,action_prob_white=V(net)$action_prob_white)
report
report<-data.frame(node_id,action_prob_red=V(net)$action_prob_red,action_prob_blue=V(net)$action_prob_blue,action_prob_white=V(net)$action_prob_white,color=V(net)$color)
report
simulator_luncher(10,10,10,0.0001)
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/make_Social_network_watts_storage.R')
net<-make.random.social.network(3)
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/report_model.R')
report_diffusion_condition(net,1)
report_diffusion_condition(net,1)
x<-V(net)$average_penalty_red_action/10
x
V(net)$average_penalty_red_action/10
V(net)$average_penalty_red_action
V(net)$count_penalty_red_action
V(net)$count_penalty_blue_action
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/make_Social_network_watts_storage.R')
net<-make.random.social.network(3)
report_diffusion_condition(net,1)
report_diffusion_condition(net,1)
debugSource('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/report_model.R')
report_diffusion_condition(net,1)
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/simulator_luncher.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/setDiffuser_Competitive.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/set_Action_probability_vector.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/rewiring_with_fermi_function.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/report_model.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/make_Social_network_watts_storage.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/choose_action.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/choose_action.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/calculate_penalty.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/action_probability_claculation.R')
simulator_luncher(10,5,100,0.001)
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/make_Social_network_watts_storage.R')
net<-make.random.social.network(3)
net
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/setDiffuser_Competitive.R')
net<-set.diffuser(net,10)
V(net)[color=="red"]
Sample(V(net),10)
sample(V(net),10)
sample(V(net),10)
sample(V(net),10)
sample(V(net),10)
sample(V(net),10)
sample(V(net),10)
sample(V(net),10)
sample(V(net),10)
sample(V(net),10)
sample(V(net),10)
sample(V(net),10)
sample(V(net),10)
sample(V(net),10)
sample(V(net),10)
red<-sample(V(net),10)
x
red
blue<-sample(V(net),10)
all(red,blue)
red
blue
while(!all(red,blue)){
blue<-sample(V(net),10)
}
red
blue
while(!all(red,blue)){
blue<-sample(V(net),10)
}
blue
seed<-sample(V(net)10)
seed<-sample(V(net),10)
red<-seed[1:5]
blue<-seed[6:10]
red
blue
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/setDiffuser_Competitive.R')
net<-make.random.social.network(5)
net
net<-set.diffuser()
net<-set.diffuser(net)
net<-set.diffuser(net,10)
net<-set.diffuser(net,10)
seed.node<-sample(V(net),10*2)
red.seed<-seed.node[1:10]
blue.seed<-seed.node[10+1:10*2]
seed.node
seed.node[11:20]
seed.node[10+1:20]
seed.node[11:10*2]
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/setDiffuser_Competitive.R')
net<-set.diffuser(net,10)
V(net)[color=="red"]
V(net)[color=="blue"]
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/set_Action_probability_vector.R')
net<-set_Action_prob(net)
neighbors(net,28)
V(net)$action_prob_red
V(net)[28]$action_prob_red
neighbors(net,28)$action_prob_red
neighbors(net,28)$action_prob_blue
neighbors(net,28)$action_prob_white
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/choose_action.R')
net<-choose_action(net)
neighbors(net,28)$color
neighbors(net,28)$action_prob_white
neighbors(net,28)$action_prob_blue
neighbors(net,28)$action_prob_red
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/calculate_penalty.R')
net<-calculate_penalty(net)
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/action_probability_claculation.R')
action_prob_calculator(net,0.001)
net<-action_prob_calculator(net,0.001)
neighbors(net,28)$action_prob_red
neighbors(net,28)$action_prob_blue
neighbors(net,28)$action_prob_white
neighbors(net,28)
neighbors(net,28)$color
neighbors(net,28)$penalty
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/simulator_luncher.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/setDiffuser_Competitive.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/set_Action_probability_vector.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/rewiring_with_fermi_function.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/report_model.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/make_Social_network_watts_storage.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/choose_action.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/calculate_penalty.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/action_probability_claculation.R')
simulator_luncher(10,5,100,0.001)
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/report_model.R')
simulator_luncher(10,5,100,0.001)
simulator_luncher(10,5,100,0.001)
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/simulator_luncher.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/setDiffuser_Competitive.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/set_Action_probability_vector.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/rewiring_with_fermi_function.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/report_model.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/make_Social_network_watts_storage.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/choose_action.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/calculate_penalty.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/action_probability_claculation.R')
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/rewiring_with_fermi_function.R')
simulator_luncher(10,5,100,0.001)
source('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/action_probability_vector_average.R')
net<-make.random.social.network(3)
net<-set.diffuser(net,10)
net<-mean_probability(net)
net
red<-V(net)[color=="red"]
red<-V(net)[color=="blue"]
red<-V(net)[color=="red"]
blue<-V(net)[color=="blue"]
red
blue
neighbors(net,3)
V(net)[3]$mean_probability_red
V(net)[3]$mean_probability_blue
V(net)[3]$mean_probability_white
choose(10,1)
choose(3,2)
mean_penalty<-c(0,0,0)
mean_penalty
mean_penalty[1]
mean_penalty[2]
mean_penalty[0]
mean_penalty[3]
3^2
net
g<-net
g
debugSource('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/simulator_luncher_server.R')
net<-make.random.social.network(3)
net<-set.diffuser(net,5)
net<-set_Action_prob(net)
net<-choose_action(net)
net<-calculate_penalty(net)
net<-calculate_penalty(net)
net<-calculate_penalty(net)
V(net)[19]
neighbors(net,19)
count_agree<-length(neighbors(net,19)[color==V(net)[19]$color])
count_dissagree<-length(neighbors(net,19)[color!="white" & color!=V(net)[19]$color])
count_dissagree/(count_agree+count_dissagree)
count_dissagree/(count_agree+count_dissagree)>0.5
debugSource('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/simulator_luncher_server.R')
net<-make.random.social.network(3)
net<-set.diffuser(net,3)
net<-set_Action_prob(net)
net<-choose_action(net)
net<-calculate_penalty(net)
V(net)[21]$color
count_agree<-length(neighbors(net,i)[color==V(net)[i]$color])
count_agree<-length(neighbors(net,21)[color==V(net)[21]$color])
count_agree
count_dissagree<-length(neighbors(net,i)[color!="white" & color!=V(net)[i]$color])
count_dissagree<-length(neighbors(net,21)[color!="white" & color!=V(net)[21]$color])
count_dissagree
ratio<-count_dissagree/(count_agree+count_dissagree)
debugSource('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/simulator_luncher_server.R')
net<-make.random.social.network(5)
net<-set.diffuser(net,5)
net<-set_Action_prob(net)
net<-choose_action(net)
net<-calculate_penalty(net)
simulator_luncher(5,1,10,0.1,.001)
View(calculate_penalty)
x<-NaN
y<-2
x/(x+y)
x/(x+y)>0.5
if(x/(x+y)>0.5)x
simulator_luncher(5,1,10,0.1,.001)
debugSource('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/simulator_luncher_server.R')
simulator_luncher(5,1,10,0.1,.001)
is.nan(x)
is(x/(x+y))
is.nan(x/(x+y))
is.nan(x/(x+y)>0.5)
debugSource('D:/Simulator_these_phase_1/Competitive_Information_Diffusion/simulator_luncher_server.R')
simulator_luncher(5,1,10,0.1,.001)
